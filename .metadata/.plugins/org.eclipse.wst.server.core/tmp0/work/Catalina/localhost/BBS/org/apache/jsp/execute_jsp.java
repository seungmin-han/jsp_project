/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-12-20 12:05:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import java.text.SimpleDateFormat;
import java.util.Date;
import infra.MemberDAO;
import infra.TeamDAO;
import infra.PostDAO;
import infra.RegionDAO;
import infra.ImageDAO;
import infra.Image;
import common.Common;

public final class execute_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("infra.ImageDAO");
    _jspx_imports_classes.add("infra.Image");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("infra.PostDAO");
    _jspx_imports_classes.add("infra.RegionDAO");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("common.Common");
    _jspx_imports_classes.add("infra.MemberDAO");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("infra.TeamDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

request.setCharacterEncoding("UTF-8");

      out.write('\r');
      out.write('\n');
      infra.Member member = null;
      member = (infra.Member) _jspx_page_context.getAttribute("member", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (member == null){
        member = new infra.Member();
        _jspx_page_context.setAttribute("member", member, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      infra.Team team = null;
      team = (infra.Team) _jspx_page_context.getAttribute("team", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (team == null){
        team = new infra.Team();
        _jspx_page_context.setAttribute("team", team, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      infra.Post post = null;
      post = (infra.Post) _jspx_page_context.getAttribute("post", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (post == null){
        post = new infra.Post();
        _jspx_page_context.setAttribute("post", post, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      infra.Region region = null;
      region = (infra.Region) _jspx_page_context.getAttribute("region", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (region == null){
        region = new infra.Region();
        _jspx_page_context.setAttribute("region", region, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      infra.Image image = null;
      image = (infra.Image) _jspx_page_context.getAttribute("image", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (image == null){
        image = new infra.Image();
        _jspx_page_context.setAttribute("image", image, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("member"), request);
      out.write(' ');
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("team"), request);
      out.write(' ');
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("post"), request);
      out.write(' ');
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("region"), request);
      out.write(' ');
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("image"), request);
      out.write(' ');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("member"), "ifmbRegIp",
Common.getClientIp(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("member"), "ifmbModIp",
Common.getClientIp(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("member"), "ifmbRegDeviceCd",
Common.getDeviceCd(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("member"), "ifmbModDeviceCd",
Common.getDeviceCd(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("team"), "iftmRegIp",
Common.getClientIp(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("team"), "iftmModIp",
Common.getClientIp(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("team"), "iftmRegDeviceCd",
Common.getDeviceCd(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("team"), "iftmModDeviceCd",
Common.getDeviceCd(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("post"), "ifptRegIp",
Common.getClientIp(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("post"), "ifptModIp",
Common.getClientIp(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("post"), "ifptRegDeviceCd",
Common.getDeviceCd(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("post"), "ifptModDeviceCd",
Common.getDeviceCd(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("region"), "ifrgRegIp",
Common.getClientIp(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("region"), "ifrgModIp",
Common.getClientIp(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("region"), "ifrgRegDeviceCd",
Common.getDeviceCd(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("region"), "ifrgModDeviceCd",
Common.getDeviceCd(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("image"), "ifimRegIp",
Common.getClientIp(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("image"), "ifimModIp",
Common.getClientIp(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("image"), "ifimRegDeviceCd",
Common.getDeviceCd(request) );
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("image"), "ifimModDeviceCd",
Common.getDeviceCd(request) );
      out.write("\r\n");
      out.write("\r\n");

	infra.MemberDAO memberDAO = new MemberDAO();
	infra.TeamDAO teamDAO = new TeamDAO();
	infra.PostDAO postDAO = new PostDAO();
	infra.RegionDAO regionDAO = new RegionDAO();
	infra.ImageDAO imageDAO = new ImageDAO();
	String process = request.getParameter("process");
	
	ArrayList<Image> imgs = new ArrayList<>();

	if(process.equals("register")) { 							// 회원가입 처리
		String ifmbPassword = request.getParameter("ifmbPassword");
		String ifmbPasswordCheck = request.getParameter("ifmbPasswordCheck");
		
		if(ifmbPassword.equals(ifmbPasswordCheck)) {			//패스워드 일치 검사
			ifmbPassword = Common.encrypt(ifmbPassword);
		} else {
			Common.alert("비밀번호가 일치하지 않습니다", response);
			Common.moveBack(response);
		}

      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("member"), "ifmbPassword",
ifmbPassword );
      out.write('\r');
      out.write('\n');
 
		int result = memberDAO.register(member);
		if(result == -1) {	//db 에러
			Common.alert("알 수 없는 에러",response);
			Common.moveBack(response);
		} else {			//정상 작동
			Common.alert("회원가입이 정상적으로 처리되었습니다.",response);
			Common.moveTo("index.jsp",1,response);
		}
	} else if (process.equals("login")) {				//로그인 처리
		int result = memberDAO.login(member);
		switch(result) {
			case -1 :
				Common.alert("비밀번호가 일치하지 않습니다.",response);
				Common.moveBack(response);
				break;
			case -2 :
				Common.alert("DB Error.",response);
				Common.moveBack(response);
				break;
			case -3 :
				Common.alert("존재하지 않는 아이디입니다.",response);
				Common.moveBack(response);
				break;
			default :
				session.setAttribute("ifmbId", member.getIfmbId());
				session.setAttribute("iftmAdminNy", result);
				System.out.println(result);
				Common.alert("로그인 성공", response);
				Common.moveTo("index.jsp",1,response);
				break;
		}
		
		
	} else if (process.equals("logout")) {					//로그아웃
		session.invalidate(); 		// 세션 소멸
		Common.moveTo("index.jsp",1,response);
		
		
		
	} else if (process.equals("createTeam")) { 				// 팀 생성
		int result = teamDAO.createTeam(team, (String) session.getAttribute("ifmbId"));
		if(result != -1) {
			out.print("<script>alert('팀이 정상적으로 생성되었습니다.')</script>");
			Common.moveTo("team.jsp", 1, response);
		}
	} else if(process.equals("post")) {
		int ifrgSeq = regionDAO.posting(region, (String) session.getAttribute("ifmbId"));
		if(ifrgSeq < 1) {
			Common.alert("지역 생성에 실패하였습니다.", response);
			Common.moveBack(response);
			return;
		} else {
			int lastInsertId = postDAO.posting(post, (String) session.getAttribute("ifmbId"), ifrgSeq);
			if(lastInsertId > 0) {
				imgs = (ArrayList<Image>)session.getAttribute("imgs");
				if(imgs == null) {
					session.removeAttribute("imgs");
					Common.alert("게시글이 정상적으로 작성되었습니다.",response);
					Common.moveTo("team.jsp",1,response);
					return;
				}
				for (Image img : imgs) {
					int result = imageDAO.imageUpload(img,(String) session.getAttribute("ifmbId"), lastInsertId);
					if(result < 1) {
						Common.alert("이미지 업로드 중 에러가 발생했습니다.",response);
						Common.moveTo("team.jsp", 1, response);
						break;
					}
				}
				session.removeAttribute("imgs");
				Common.alert("게시글이 정상적으로 작성되었습니다.", response);
				Common.moveTo("team.jsp",1,response);
				
			} else {
				session.removeAttribute("imgs");
				Common.alert("게시글 작성을 실패했습니다.",response);
				Common.moveTo("team.jsp",1,response);
			}	
		}
		
	} else if(process.equals("upload")) {
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html;charset=utf-8");
		
		String path = application.getRealPath("/images");
		String realPath = request.getServletContext().getRealPath("/images");
		int max = 1024 * 1024 * 10;

		MultipartRequest mr = new MultipartRequest(request, realPath, max, "utf-8", new DefaultFileRenamePolicy());

		String original = mr.getOriginalFileName("upload");
		String fileName = mr.getFilesystemName("upload");
		File file = new File(path+fileName);
		
		int size = (int)file.length();
		String[] tmp = fileName.split("\\.");		
		String type = tmp[1];
		
		Image img = new Image();
		
		img.setIfimName(fileName);
		img.setIfimType(type);
		img.setIfimSize(size);
		img.setIfimPath(".\\images\\");
		img.setIfimRegIp(Common.getClientIp(request));
		img.setIfimRegDeviceCd(Common.getDeviceCd(request));
		
		if(session.getAttribute("imgs") != null) {
			imgs = (ArrayList<Image>) session.getAttribute("imgs");
		}
		
		imgs.add(img);
		session.setAttribute("imgs", imgs);
		

		String fileUrl = ".\\\\images\\\\"+fileName;
		PrintWriter printWriter = null;
		printWriter = response.getWriter();


		printWriter.print("{\"fileName\" : \""+fileName+"\", \"uploaded\" : 1, \"url\":\""+fileUrl+"\"}");
		
	} else if(process.equals("getList")) {
		int iftmSeq = Integer.parseInt(request.getParameter("iftmSeq"));
		String category = (String) request.getParameter("category");
		out.print(postDAO.getList(iftmSeq,category));
	} else if(process.equals("getCardList")) {
		out.print(postDAO.getCardList());
	} else if(process.equals("getOne")) {
		int ifptSeq = Integer.parseInt(request.getParameter("ifptSeq"));
		out.print(postDAO.getOne(ifptSeq));
	} else if(process.equals("getImageList")) {
		int iftmSeq = Integer.parseInt(request.getParameter("iftmSeq"));
		out.print(imageDAO.getImageList(iftmSeq));
	} else if(process.equals("getRegionList")) {
		int iftmSeq = Integer.parseInt(request.getParameter("iftmSeq"));
		out.print(regionDAO.getRegionList(iftmSeq));
	} else if(process.equals("update")) {
		int ifptSeq = Integer.parseInt(request.getParameter("ifptSeq"));
		post.setIfptSeq(ifptSeq);
		post.setIfptModSeq(ifptSeq);
		if(postDAO.update(post, (String) session.getAttribute("ifmbId")) == 1) {
			if(regionDAO.update(region, ifptSeq, (String) session.getAttribute("ifmbId"))==1) {
				Common.alert("성공적으로 글을 수정하였습니다.", response);
				Common.moveTo("team.jsp",1, response);
			}
		} else {
			Common.alert("글을 수정하는데 오류가 발생했습니다.", response);
			Common.moveTo("team.jsp",1, response);
		}
	} else if(process.equals("deleteByUpdate")) {
		int ifptSeq = Integer.parseInt(request.getParameter("ifptSeq"));
		post.setIfptSeq(ifptSeq);
		if(postDAO.deleteByUpdate(post, (String) session.getAttribute("ifmbId")) == 1) {
			if(regionDAO.deleteByUpdate(region ,ifptSeq, (String) session.getAttribute("ifmbId"))==1) {
				if(imageDAO.deleteByUpdate(image, ifptSeq, (String) session.getAttribute("ifmbId")) == 1) {
					Common.alert("성공적으로 글을 삭제하였습니다.", response);
					Common.moveTo("team.jsp",1, response);	
				} else {
					//by pass
				}
			} else {
				Common.alert("지역 삭제 실패.", response);
				Common.moveTo("team.jsp",1, response);	
			}
		} else {
			Common.alert("글을 삭제하는데 오류가 삭제했습니다.", response);
			Common.moveTo("team.jsp",1, response);
		}
		
	} else if(process.equals("updateTeam")) {
		if(teamDAO.update(team, (String) session.getAttribute("ifmbId"))==1) {
			Common.alert("팀 정보가 수정되었습니다.", response);
			Common.moveTo("team.jsp",1, response);
		} else {
			Common.alert("팀 정보 수정을 실패하였습니다.", response);
			Common.moveTo("team.jsp",1, response);
		}
	} else if(process.equals("updateInviteCode")) {
		out.print(teamDAO.updateInviteCode(team,(String) session.getAttribute("ifmbId")));
	} else if(process.equals("teamDeleteByUpdate")) {
		int iftmSeq = Integer.parseInt(request.getParameter("iftmSeq"));
		team.setIftmSeq(iftmSeq);
		if(teamDAO.deleteByUpdate(team, (String) session.getAttribute("ifmbId"))==1){
			Common.alert("팀이 삭제되었습니다.", response);
			Common.moveTo("index.jsp",1, response);
		} else {
			Common.alert("팀 삭제 중 오류가 발생되었습니다.", response);
			Common.moveTo("index.jsp",1, response);
		}
	} else if (process.equals("joinTeam")){
		String ifmbId = (String) session.getAttribute("ifmbId");
		String code = request.getParameter("iftmInviteCd");
		member.setIfmbId(ifmbId);
		if(memberDAO.joinTeam(member, code)==1) {
			Common.alert("팀에 정상적으로 가입되었습니다.", response);
			Common.moveTo("index.jsp",1, response);
		} else {
			Common.alert("초대 코드를 다시 확인해주세요.", response);
			Common.moveTo("index.jsp",1, response);
		}
	} else if(process.equals("leaveTeam")) {
		String ifmbId = (String) session.getAttribute("ifmbId");
		member.setIfmbId(ifmbId);
		if(memberDAO.leaveTeam(member)==1) {
			Common.alert("팀을 성공적으로 탈퇴했습니다.", response);
			Common.moveTo("index.jsp",1, response);
		} else {
			Common.alert("팀을 탈퇴를 실패했습니다.", response);
			Common.moveTo("index.jsp",1, response);
		}
	} else if(process.equals("getTeamMemberList")) {
		int iftmSeq = Integer.parseInt(request.getParameter("iftmSeq"));
		String ifmbId = (String) session.getAttribute("ifmbId");
		out.print(memberDAO.getTeamMemberList(iftmSeq, ifmbId));
	} else if(process.equals("kickMember")) {
		String ifmbId = (String) request.getParameter("ifmbId");
		member.setIfmbId(ifmbId);
		out.print(memberDAO.leaveTeam(member));
	}else if(process.equals("updateMember")) {
		String ifmbId = (String) session.getAttribute("ifmbId");
		if(memberDAO.update(member, ifmbId) == 1) {
			Common.alert("회원 정보를 성공적으로 수정했습니다.", response);
			Common.moveTo("index.jsp",1, response);
		} else {
			Common.alert("회원 정보 수정을 실패했습니다.", response);
			Common.moveTo("index.jsp",1, response);
		}
		
	} else if(process.equals("getRecommendList")) {
		String ifmbId = (String) request.getParameter("ifmbId");
		System.out.print(ifmbId);
		out.print(postDAO.getRecommendList(ifmbId));
	} else if(process.equals("getSearchList")) {
		int iftmSeq = Integer.parseInt(request.getParameter("iftmSeq"));
		String category = (String) request.getParameter("category");
		String keyword = request.getParameter("keyword");
		out.print(postDAO.getList(iftmSeq,category,keyword));
	}

      out.write(' ');
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
