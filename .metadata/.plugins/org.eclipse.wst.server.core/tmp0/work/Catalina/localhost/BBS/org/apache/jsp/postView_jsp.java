/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-12-14 13:10:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import common.Common;
import infra.PostDAO;
import infra.Post;

public final class postView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("infra.PostDAO");
    _jspx_imports_classes.add("infra.Post");
    _jspx_imports_classes.add("common.Common");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"style/style.css\">\r\n");
      out.write("<script\r\n");
      out.write("  src=\"https://code.jquery.com/jquery-3.6.0.js\"\r\n");
      out.write("  integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\"\r\n");
      out.write("  crossorigin=\"anonymous\"></script>\r\n");
      out.write("  <script type=\"text/javascript\" src=\"externalLib/ckeditor/ckeditor.js\"></script>\r\n");
      out.write("  <script src=\"./script/script.js\"></script>\r\n");
      out.write("  <script src=\"./script/map.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

		boolean isSet = false;
		String ifptSeq = request.getParameter("ifptSeq");
		Cookie[] cookies = request.getCookies();
		
		if(cookies != null) {
			for(Cookie c : cookies) {	
				if(c.getName().equals(ifptSeq)) {
					isSet = true;		
				}
			}
		}
		if(isSet == false) {
			Cookie cookie = new Cookie(ifptSeq, "read");
			cookie.setMaxAge(1*24*60*60);
			response.addCookie(cookie);
			
			
			PostDAO postDAO = new PostDAO();
			int result = postDAO.updateViewer(Integer.parseInt(ifptSeq));
			
			
			if(result != 1) {
				Common.alert("조회수 업데이트 중 오류가 발생했습니다.", response);
			} 

		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\r\n");
      out.write("	<div class=\"wrap postWrap\">\r\n");
      out.write("	\r\n");
      out.write("		<div class=\"postTextWrap\">\r\n");
      out.write("			<p id=\"title\">제목:</p>\r\n");
      out.write("			<p id=\"writer\">작성자:</p>\r\n");
      out.write("			<p id=\"datetime\">작성시간:</p>\r\n");
      out.write("			<p id=\"viewer\">조회수: </p>\r\n");
      out.write("		</div>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "map.jsp", out, false);
      out.write("\r\n");
      out.write("		<textarea id=\"content\" name=\"content\" ></textarea>\r\n");
      out.write("		<a href=\"index.jsp\">돌아가기</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	<br><br><br><br>\r\n");
      out.write("	<script>\r\n");
      out.write("		let ifptSeq = ");
      out.print(request.getParameter("ifptSeq"));
      out.write(";\r\n");
      out.write("		let data = JSON.parse(getOne(ifptSeq));\r\n");
      out.write("		let updateBtn = \"<a href=\\\"postForm.jsp?process=update&ifptSeq=\"+ifptSeq+\"\\\">수정하기</a>\";\r\n");
      out.write("		let deleteBtn = \"<a href=\\\"execute.jsp?process=deleteByUpdate&ifptSeq=\"+ifptSeq+\"\\\">삭제하기</a>\";\r\n");
      out.write("		console.log(data);\r\n");
      out.write("		if(data) {\r\n");
      out.write("			$(\"#title\").text(\"제목: [\"+data['ifrgSido']+\"]\"+data['ifptTitle']);\r\n");
      out.write("			$(\"#writer\").text(\"작성자: \"+data['ifmbId']);\r\n");
      out.write("			$(\"#datetime\").text(\"작성시간: \"+data['ifptRegDatetime']);\r\n");
      out.write("			$(\"#viewer\").text(\"조회수: \"+data['ifptViewer']);\r\n");
      out.write("			let editor = CKEDITOR.replace( \r\n");
      out.write("		            'content'\r\n");
      out.write("		            ,{ \r\n");
      out.write("		                width : \"100%\"\r\n");
      out.write("		                , height : \"500px\"\r\n");
      out.write("		                , enterMode : 2\r\n");
      out.write("		                , readOnly: true\r\n");
      out.write("		            }\r\n");
      out.write("		        );\r\n");
      out.write("			\r\n");
      out.write("			editor.setData(data['ifptContent']);\r\n");
      out.write("			if(data['ifmbId']==\"");
      out.print(session.getAttribute("ifmbId"));
      out.write("\") {\r\n");
      out.write("				$(\".wrap\").append(updateBtn);\r\n");
      out.write("				$(\".wrap\").append(deleteBtn);\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			fill(data['ifrgSido'],data['ifrgSigungu']);\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
